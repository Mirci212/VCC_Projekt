@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using VCC_Projekt.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject EmailSender EmailSender
@inject NavigationManager NavigationManager

<PageTitle>E-Mail-Adresse bestätigen</PageTitle>

<h1>E-Mail-Adresse bestätigen</h1>
<StatusMessage Message="@statusMessage" />

@if (teamname != string.Empty && eventId != 0)
{
    <div class="text-center mt-auto">
        <a href="/signup-event-confirmation?teamname=@teamname&eventId=@eventId" class="w-25 btn btn-lg btn-success" @onclick="AddMemberToGroup">Bitte hier klicken, um der Gruppe @teamname beizutreten!</a>
    </div>
}



@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string teamname;
    private int eventId;
    private ApplicationUser user;

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            statusMessage = result.Succeeded ? "Danke fürs Bestätigen der Email." : "Fehler beim Bestätigen der Email";
        }

        var uri = new Uri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("teamname", out var teamnameValue))
        {
            teamname = teamnameValue;
        }

        if (queryParams.TryGetValue("eventId", out var eventIdValue) && int.TryParse(eventIdValue, out int parsedEventId))
        {
            eventId = parsedEventId;
        }
    }

    private void AddMemberToGroup()
    {
        UserInGruppe gruppe = new UserInGruppe(user.UserName, dbContext.Gruppen.Where(g => g.Gruppenname == teamname && g.Event_EventID == eventId).Select(g => g.GruppenID).First());

        dbContext.UserInGruppes.Add(gruppe);
        dbContext.SaveChanges();

        NavigationManager.NavigateTo($"/signup-event-confirmation?teamname={teamname}&eventId={eventId}");
    }
}
