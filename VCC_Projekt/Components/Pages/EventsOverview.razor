@page "/my-events"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject EmailSender EmailSender
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MySqlConnector
@using VCC_Projekt.Data
@using Microsoft.AspNetCore.Components.Forms;
@using System;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]

<PageTitle>Meine Events</PageTitle>

<div class="text-center">
    <MudText Typo=Typo.h2 style="color: #134883">Meine Events</MudText>
</div>

@if (events == null)
{
    <div class="text-center">
        <MudText Typo="Typo.subtitle1">Lade Events...</MudText>
    </div>
}
else if (events.Count == 0)
{
    <div class="text-center">
        <MudText Typo="Typo.subtitle1">Du hast dich für keine Events angemeldet.</MudText>
        <a class="btn btn-link" href="events">Kommende Events</a>
    </div>
}
else
{
    <MudContainer MaxWidth="MaxWidth.False">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="10">
                <div class="text-center">
                    <br />
                    <MudButton OnClick="() => ShowPastEvents()" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AccessTime">Vergangene Events</MudButton>
                    <MudButton OnClick="() => ShowUpcomingEvents()" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AccessTime">Zukünftige Events</MudButton>

                    @if (filteredEvents.Count == 0 && isUpcomingEventsActive)
                    {
                        <MudText Typo="Typo.subtitle1">Du hast dich für kein zufünftiges Event angemeldet. </MudText>
                        <a class="btn btn-link" href="events">Kommende Events</a>

                    }

                    @if (filteredEvents.Count == 0 && isPastEventsActive)
                    {
                        <MudText Typo="Typo.subtitle1">Du hast noch kein Event absolviert.</MudText>
                    }
                </div>
            </MudItem>

            <MudItem xs="10">
                @foreach (var eventItem in filteredEvents.OrderBy(e => e.Beginn))
                {
                    selectedEventId = eventItem.EventID;
                    var userGroup = userGroups.FirstOrDefault(g => g.Event_EventID == eventItem.EventID);
                    if (userGroup == null) continue;

                    bool isGroupLeader = userGroup?.GruppenleiterId == usernameLoggedInUser;
                    bool canDeleteGroup = isGroupLeader && userGroup.UserInGruppe.Count == 1;
                    bool canAddMember = isGroupLeader && userGroup.UserInGruppe.Count < 4;

                    var eventEndTime = eventItem.Beginn.AddMinutes(eventItem.Dauer);
                    bool eventStarted = eventItem.Beginn <= DateTime.Now;
                    bool isCurrentEvent = eventItem.Beginn <= DateTime.Now && eventEndTime >= DateTime.Now;

                    <MudCard class="mt-3" Outlined="true">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">
                                @eventItem.Bezeichnung
                            </MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText><strong>Teilnahmeart: </strong>@userGroup.Teilnehmertyp</MudText>

                            @if (userGroup.Teilnehmertyp == "Team")
                            {
                                <MudText><strong>Teamname: </strong>@userGroup.Gruppenname</MudText>
                            }

                            @if (userGroup.Teilnehmertyp == "Einzelspieler")
                            {
                                <MudText><strong>Benutzername: </strong>@userGroup.GruppenleiterId</MudText>
                            }

                            <MudText><strong>Datum: </strong>@eventItem.Beginn.ToString("d. MMMM yyyy", new System.Globalization.CultureInfo("de-DE"))</MudText>

                            @if(isCurrentEvent)
                            {
                                <div class="text-class">
                                    <MudButton Color="Color.Success" OnClick="() => JoinEvent(eventItem.EventID)">Teilnehmen</MudButton>
                                </div>
                            }

                            @if(userGroup.Teilnehmertyp == "Team")
                            {
                                @if(isGroupLeader)
                                {
                                    @if (userGroup.UserInGruppe.Count > 1)
                                    {
                                        <br/>
                                        <MudText><strong>Gruppenmitglieder: </strong></MudText>
                                    }

                                    @foreach (var member in userGroup.UserInGruppe)
                                    {
                                        @if (member.User_UserId != userGroup.GruppenleiterId)
                                        {
                                            <MudText class="list-group-item d-flex justify-content-between align-items-center">
                                                @member.User_UserId
                                                <MudButton Color="Color.Error" OnClick="() => RemoveMember(userGroup.GruppenID, member.User_UserId)" Disabled="@(eventStarted || isCurrentEvent)">Entfernen</MudButton>
                                            </MudText>
                                        }
                                    }

                                    @foreach (var invitedMember in userGroup.EingeladeneUserInGruppe)
                                    {
                                        <MudText class="list-group-item d-flex justify-content-between align-items-center">
                                            @invitedMember.Email - wurde zur Gruppe eingeladen
                                            <MudButton Color="Color.Error" OnClick="() => CancelInvitation(userGroup.GruppenID, invitedMember.Email)" Disabled="@(eventStarted || isCurrentEvent)">Ausladen</MudButton>
                                        </MudText>
                                    }

                                    @if (isAddingMember)
                                    {
                                            <EditForm Model="@newMember" OnValidSubmit="() => AddMember(userGroup.GruppenID, userGroup.Event_EventID, newMember.Email)" class="w-100">
                                                <DataAnnotationsValidator />
                                                <div class =" d-flex justify-content-between align-items-center">
                                                    <MudTextField T="string"  @bind-Value="newMember.Email" Label="E-Mail-Adresse" Variant="Variant.Outlined" Required="true"></MudTextField>
                                                    <MudButton Color="Color.Success" ButtonType="ButtonType.Submit">Hinzufügen</MudButton>
                                                </div>
                                                <ValidationMessage For="@(() => newMember.Email)" class="text-danger" />
                                            </EditForm>
                                    }

                                    if(!eventStarted && !isCurrentEvent)
                                    {
                                        @if (canAddMember && !((userGroup.UserInGruppe.Count + userGroup.EingeladeneUserInGruppe.Count) > 4))
                                        {
                                            <MudButton Color="Color.Success" OnClick="() => ShowAddMemberInput()" StartIcon="@Icons.Material.Filled.Add">Mitglied hinzufügen</MudButton>
                                        }

                                        @if (canDeleteGroup)
                                        {
                                            <MudButton Color="Color.Error" OnClick="() => Unregister(eventItem.EventID)" StartIcon="@Icons.Material.Filled.Delete">Gruppe löschen</MudButton>
                                        }
                                    }
                                }

                                else
                                {
                                    if(!eventStarted && !isCurrentEvent)
                                    {
                                        <MudButton Color="Color.Error" OnClick="() => Unregister(eventItem.EventID)" StartIcon="@Icons.Material.Filled.ExitToApp">Gruppe verlassen</MudButton>
                                    }
                                }
                            }

                            else if (userGroup.Teilnehmertyp == "Einzelspieler")
                            {
                                if(!eventStarted && !isCurrentEvent)
                                {
                                    <MudButton Color="Color.Error" OnClick="() => Unregister(eventItem.EventID)" StartIcon="@Icons.Material.Filled.ExitToApp" >Abmelden</MudButton>
                                }
                            }
                            
                            @if (eventStarted && !isCurrentEvent)
                            {
                                var rang = dbContext.Set<RanglisteResult>()
                                .FromSqlRaw("CALL ShowRangliste(@eventId)", new MySqlParameter("@eventId", eventItem.EventID))
                                .ToList()
                                .Where(g => g.Gruppenname == userGroup.Gruppenname)
                                .Select(g => g.Rang)
                                .FirstOrDefault();

                                <br/>

                                <MudText><strong>Rang: </strong>@(rang == 0 ? "Leider kein Level absolviert." : rang.ToString())</MudText>

                                <div class="text-center">
                                    <MudButton Href="@($"dashboard/{eventItem.EventID}")" Color="Color.Primary" StartIcon="@Icons.Material.Filled.SpaceDashboard">Zum Dashboard</MudButton>
                                </div>
                            }

                        </MudCardContent>
                    </MudCard>

                    <br/>
                }
            </MudItem>
        </MudGrid>
    </MudContainer>
}

<style>
    body {
        background-color: #f8f9fa;
    }

    .btn-success {
        background-color: #134883;
        border-color: #134883;
    }

        .btn-success:hover {
            background-color: #2f5e91;
            border-color: #2f5e91;
        }

    .btn-primary{
        background-color: #2f5e91;
        border-color: #2f5e91;
    }

    h1, h2, h3 {
        color: #134883;
    }

    .card {
        transition: transform 0.2s;
        border: 2px solid #134883;
    }

        .card:hover {
            transform: scale(1.05);
        }

        .card:selected {
            transform: scale(1.05);
        }
</style>
