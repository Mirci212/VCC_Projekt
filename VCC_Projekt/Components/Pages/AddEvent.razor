@page "/events-manager"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject EmailSender EmailSender
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using VCC_Projekt.Data
@using Microsoft.AspNetCore.Components.Forms;
@using System;
@using MudBlazor

<PageTitle>Wettbewerb-Manager</PageTitle>

<div class="text-center">
    <h1 class="display-4 font-weight-bold" style="color: #134883;">Wettbewerb-Manager</h1>
    <p class="lead text-muted">
        Wähle ein Event aus, um dieses zu bearbeiten oder legen ein neues Event an.
    </p>
</div>

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <MudSelect T="Event" Label="Event auswählen" ValueChanged="@(async e => await OnEventSelected(e))" ToStringFunc="@(e => e != null ? $"{e.Bezeichnung} (EventId:{e.EventID})" : "")" Variant="Variant.Outlined">
                @foreach (var ev in _events)
                {
                    <MudSelectItem Value="@ev">@ev.Bezeichnung (@ev.Beginn.ToString("d. MMMM yyyy", new System.Globalization.CultureInfo("de-DE")))</MudSelectItem>
                }
            </MudSelect>

            @if (_selectedEvent.EventID != 0)
            {
                <MudCard>
                    <MudCardContent>
                        @if (_selectedEvent.Beginn > DateTime.Now)
                        {
                            <div class="text-end">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@ToggleEditMode" />
                            </div>
                        }

                        <EditForm EditContext="@editContext" OnValidSubmit="@UpdateEvent" method="post" FormName="eventRegistration">
                            <DataAnnotationsValidator />

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.EventName" class="form-control" disabled="@(!isEditing)" />
                                <label for="eventname">Wettbewerbsname</label>
                                <ValidationMessage For="@(() => Input.EventName)" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputDate @bind-Value="Input.EventDate" class="form-control" TValue="DateTime" disabled="@(!isEditing)" />
                                <label for="eventdate">Datum</label>
                                <ValidationMessage For="@(() => Input.EventDate)" class="text-danger" />
                            </div>

                            <div class="row mb-3">
                                <div class="col">
                                    <div class="form-floating">
                                        <input type="time"
                                               value="@Input.StartTime.ToString(@"hh\:mm")"
                                               @onchange="@(e => UpdateStartTime(e.Value.ToString()))"
                                               class="form-control"
                                               disabled="@(!isEditing)" />
                                        <label for="starttime">Startzeit</label>
                                        <ValidationMessage For="@(() => Input.StartTime)" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-floating">
                                        <input type="time"
                                               value="@Input.EndTime.ToString(@"hh\:mm")"
                                               @onchange="@(e => UpdateEndTime(e.Value.ToString()))"
                                               class="form-control"
                                               disabled="@(!isEditing)" />
                                        <label for="endtime">Endzeit</label>
                                        <ValidationMessage For="@(() => Input.EndTime)" class="text-danger" />
                                    </div>
                                </div>
                            </div>

                            <div class="form-floating mb-3">
                                <input type="number" class="form-control" min="0" @bind="Input.PenaltyMinutes" disabled="@(!isEditing)" />
                                <label for="penaltyminutes">Strafminuten pro Fehlerversuch</label>
                                <ValidationMessage For="@(() => Input.PenaltyMinutes)" class="text-danger" />
                            </div>

                            @if (_selectedEvent.Beginn > DateTime.Now)
                            {
                                <div class="text-center mt-5">
                                    <button type="submit" class="w-25 btn btn-lg btn-success" disabled="@(!isEditing)">Wettbewerb speichern</button>
                                </div>
                            }

                        </EditForm>
                    </MudCardContent>
                </MudCard>
            }

            else
            {

                <MudCard>
                    <MudCardContent>
                        <div class="container mt-5">
                            <div class="mt-4">
                                <EditForm EditContext="@editContext" OnValidSubmit="@CreateEvent" method="post" FormName="eventRegistration">
                                    <DataAnnotationsValidator />

                                    <div class="form-floating mb-3">
                                        <InputText @bind-Value="Input.EventName" class="form-control" />
                                        <label for="eventname">Wettbewerbsname</label>
                                        <ValidationMessage For="@(() => Input.EventName)" class="text-danger" />
                                    </div>

                                    <div class="form-floating mb-3">
                                        <InputDate @bind-Value="Input.EventDate" class="form-control" TValue="DateTime" />
                                        <label for="eventdate">Datum</label>
                                        <ValidationMessage For="@(() => Input.EventDate)" class="text-danger" />
                                    </div>

                                    <div class="row mb-3">
                                        <div class="col">
                                            <div class="form-floating">
                                                <input type="time"
                                                       value="@Input.StartTime.ToString(@"hh\:mm")"
                                                       @onchange="@(e => UpdateStartTime(e.Value.ToString()))"
                                                       class="form-control" />
                                                <label for="starttime">Startzeit</label>
                                                <ValidationMessage For="@(() => Input.StartTime)" class="text-danger" />
                                            </div>
                                        </div>
                                        <div class="col">
                                            <div class="form-floating">
                                                <input type="time"
                                                       value="@Input.EndTime.ToString(@"hh\:mm")"
                                                       @onchange="@(e => UpdateEndTime(e.Value.ToString()))"
                                                       class="form-control" />
                                                <label for="endtime">Endzeit</label>
                                                <ValidationMessage For="@(() => Input.EndTime)" class="text-danger" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-floating mb-3">
                                        <input type="number" class="form-control" min="0" @bind="Input.PenaltyMinutes" />
                                        <label for="penaltyminutes">Strafminuten pro Fehlerversuch</label>
                                        <ValidationMessage For="@(() => Input.PenaltyMinutes)" class="text-danger" />
                                    </div>


                                    <div class="text-center mt-5">
                                        <button type="submit" class="w-25 btn btn-lg btn-success">Wettbewerb anlegen</button>
                                        <p></p>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            }

        </MudItem>
    </MudGrid>
</MudContainer>

@* else
{
    <div class="text-center">
        <h2 style="color: #134883">Wettbewerb anlegen</h2>
        <p class="lead text-muted">Um einen Wettbewerb anzulegen, bitte die nachfolgenden Informationen ausfüllen.</p>
    </div>
    <MudGrid>
        <MudItem xs="12">
            <MudCard class="mt-3">
                <MudCardContent>

                    <div class="container mt-5">
                        <div class="mt-4">
                            <EditForm EditContext="@editContext" OnValidSubmit="@HandleSubmit" method="post" FormName="eventRegistration">
                                <DataAnnotationsValidator />

                                <div class="form-floating mb-3">
                                    <InputText @bind-Value="Input.EventName" class="form-control"/>
                                    <label for="eventname">Wettbewerbsname</label>
                                    <ValidationMessage For="@(() => Input.EventName)" class="text-danger" />
                                </div>

                                <div class="form-floating mb-3">
                                    <InputDate @bind-Value="Input.EventDate" class="form-control" TValue="DateTime" />
                                    <label for="eventdate">Datum</label>
                                    <ValidationMessage For="@(() => Input.EventDate)" class="text-danger" />
                                </div>

                                <div class="row mb-3">
                                    <div class="col">
                                        <div class="form-floating">
                                            <input type="time"
                                                    value="@Input.StartTime.ToString(@"hh\:mm")"
                                                    @onchange="@(e => UpdateStartTime(e.Value.ToString()))"
                                                    class="form-control" />
                                            <label for="starttime">Startzeit</label>
                                            <ValidationMessage For="@(() => Input.StartTime)" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="form-floating">
                                            <input type="time"
                                                    value="@Input.EndTime.ToString(@"hh\:mm")"
                                                    @onchange="@(e => UpdateEndTime(e.Value.ToString()))"
                                                    class="form-control" />
                                            <label for="endtime">Endzeit</label>
                                            <ValidationMessage For="@(() => Input.EndTime)" class="text-danger" />
                                        </div>
                                    </div>
                                </div>

                                <div class="form-floating mb-3">
                                    <input type="number" class="form-control" min="0" @bind="Input.PenaltyMinutes" />
                                    <label for="penaltyminutes">Strafminuten pro Fehlerversuch</label>
                                    <ValidationMessage For="@(() => Input.PenaltyMinutes)" class="text-danger" />
                                </div>


                                <div class="text-center mt-5">
                                    <button type="submit" class="w-25 btn btn-lg btn-success">Wettbewerb anlegen</button>
                                    <p></p>
                                </div>
                            </EditForm>
                        </div>
                    </div>

                    <MudButton OnClick="() => HandleSubmit()" Color="Color.Primary">Neues Event anlegen</MudButton>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
} *@




<style>
    body {
        background-color: #f8f9fa;
    }

    h1, h2, h3 {
        color: #134883;
    }

    .btn-success {
        background-color: #134883;
        border-color: #134883;
    }

        .btn-success:hover {
            background-color: #2f5e91;
            border-color: #2f5e91;
        }

    .form-control {
        border: 2px solid #134883;
    }

        .form-control:focus {
            border-color: #2f5e91;
            box-shadow: 0 0 5px rgba(47, 94, 145, 0.5);
        }
</style>