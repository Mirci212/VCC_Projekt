@using MudBlazor
@using System.Net.Mail
@inject IJSRuntime JSRuntime

<MudDialog>
    <DialogContent>
        <div>
            @((MarkupString)EmailBody)
        </div>

        <MudText Typo="Typo.h6" Class="mt-4 mb-2">Anhänge</MudText>
        <MudList T="Attachment">
            @foreach (var attachment in Attachments)
            {
                <MudListItem>
                    <MudIcon Icon="@Icons.Material.Filled.Attachment" Class="mr-2" />
                    <MudText>@attachment.Name</MudText>
                    <MudButton OnClick="() => DownloadAttachment(attachment)" Color="Color.Primary" Class="ml-auto">
                        Herunterladen
                    </MudButton>
                </MudListItem>
            }
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDialog" Color="Color.Primary">Schließen</MudButton>
    </DialogActions>
</MudDialog>
<script>
    function downloadFile(fileName, base64Content) {
        const link = document.createElement('a');
        link.href = 'data:application/octet-stream;base64,' + base64Content;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string EmailBody { get; set; }

    [Parameter]
    public List<Attachment> Attachments { get; set; } = new List<Attachment>();

    private void CloseDialog()
    {
        MudDialog.Close();
    }

    private async Task DownloadAttachment(Attachment attachment)
    {
        try
        {
            // Konvertiere den Inhalt des Anhangs in einen Base64-String
            using (var memoryStream = new MemoryStream())
            {
                await attachment.ContentStream.CopyToAsync(memoryStream);
                var base64Content = Convert.ToBase64String(memoryStream.ToArray());

                // Rufe die JavaScript-Funktion auf, um die Datei herunterzuladen
                await JSRuntime.InvokeVoidAsync("downloadFile", attachment.Name, base64Content);

                // Zeige eine Snackbar-Nachricht an
                Snackbar.Add($"Anhang {attachment.Name} wird heruntergeladen...", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            // Fehlerbehandlung
            Snackbar.Add($"Fehler beim Herunterladen des Anhangs: {ex.Message}", Severity.Error);
        }
    }
}