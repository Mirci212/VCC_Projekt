@page "/participation/{eventId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Benutzer")]

@if (accessDenied)
{
    <PageTitle>Zugriff verweigert</PageTitle>
    <header>
        <h1 class="text-danger">Zugriff verweigert</h1>
        <p class="text-danger">@accessDeniedMessage</p>
    </header>
}
else
{
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <PageTitle>@Event.Bezeichnung - Level @CurrentLevel.Levelnr</PageTitle>

        <MudGrid Justify="Justify.Center" Spacing="2">
            <!-- TIMER OBEN MITTIG -->
            <MudItem xs="12" Style="text-align: center;">
                <MudPaper Elevation="3" Class="pa-2">
                    <MudText Typo="Typo.h5" Class="font-bold">
                        ⏳ Zeit: <span id="timer">@((DateTime.Now - Event.Beginn).ToString("hh\\:mm\\:ss"))</span>&#9; Fehlversuche: @Fehlversuche
                    </MudText>
                </MudPaper>
            </MudItem>

            <!-- Progress Box (Links) -->
            <MudItem xs="12" md="3">
                <MudCard Elevation="3">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">📊 Progress</MudText>
                        @foreach (var level in Event.Levels)
                        {
                            <tr>
                                <td>Level @level.Levelnr</td>
                                <td>
                                    @if (Group.Absolviert.Any(a => a.Level_LevelID == level.LevelID))
                                    {
                                        var levelData = Group.Absolviert.First(le => le.Level_LevelID == level.LevelID);
                                        <p class="level-detail">⏱ Zeit: @levelData.BenoetigteZeit</p>
                                        <p class="level-detail">❌ Fehlversuche: @levelData.Fehlversuche</p>
                                        <p class="level-detail">⏳ Strafminuten: @(levelData.Fehlversuche * Event.StrafminutenProFehlversuch) min</p>
                                    }
                                    else
                                    {
                                        <p class="level-not-completed">Noch nicht geschafft</p>
                                    }
                                </td>
                            </tr>
                        }

                    </MudCardContent>
                </MudCard>
                <!-- Rangliste Box -->
                <MudCard Elevation="3" Class="mt-3">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">🏆 Aktuelle Rangliste</MudText>
                        <MudDivider/>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudGrid spacing="2">
                                    <MudItem xs="2"><MudText Typo="Typo.subtitle2">Platz</MudText></MudItem>
                                    <MudItem xs="4"><MudText Typo="Typo.subtitle2">Team Name</MudText></MudItem>
                                    <MudItem xs="4"><MudText Typo="Typo.subtitle2">Letztes Abgeschlossene Level</MudText></MudItem>
                                    <MudItem xs="3"><MudText Typo="Typo.subtitle2">Gebrauchte Zeit (min) [ohne Strafzeit]</MudText></MudItem>
                                    <MudItem xs="3"><MudText Typo="Typo.subtitle2">Strafzeit (min)</MudText></MudItem>
                                </MudGrid>
                            </MudItem>

                            @foreach (var rang in Rangliste)
                            {
                                <MudItem xs="12">
                                    <MudGrid spacing="2">
                                        <MudItem xs="2"><MudText Typo="Typo.body2">@(Rangliste.IndexOf(rang) + 1)</MudText></MudItem>  <!-- Index beibehalten -->
                                        <MudItem xs="4"><MudText Typo="Typo.body2">@(rang.gruppe.Gruppenname ?? rang.gruppe.GruppenleiterId)</MudText></MudItem>
                                        <MudItem xs="4"><MudText Typo="Typo.body2">@rang.LetztesAbgeschlossenesLevel</MudText></MudItem>
                                        <MudItem xs="3"><MudText Typo="Typo.body2">@rang.GebrauchteZeit</MudText></MudItem>
                                        <MudItem xs="3"><MudText Typo="Typo.body2">@rang.Strafminuten</MudText></MudItem>
                                    </MudGrid>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Downloads & Abgabe Box (Mitte) -->
            <MudItem xs="12" md="7">
                <MudCard Elevation="3">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">📥 Downloads</MudText>
                        <MudLink Href="@($"data:application/pdf;base64,{Convert.ToBase64String(CurrentLevel?.Angabe_PDF)}")" download="@($"Level {CurrentLevel.Levelnr}.pdf")">
                            <MudIcon Icon="@Icons.Material.Filled.PictureAsPdf" /> Level Description PDF
                        </MudLink>
                        <br />
                        <MudLink Href="@GenerateZip().Result" download="@($"level{CurrentLevel.Levelnr}.zip")" Target="_blank">
                            <MudIcon Icon="@Icons.Material.Filled.FolderZip" /> Inputs (ZIP)
                        </MudLink>

                        <MudDivider Class="my-3" />

                        <MudText Typo="Typo.h6">📤 Lösung hochladen</MudText>
                        <MudGrid>
                            @foreach (var aufgabe in CurrentLevel?.Aufgaben)
                            {
                                <MudItem xs="12">
                                    <MudCard Elevation="2">
                                        <MudCardContent>
                                            <MudGrid Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Wrap="NoWrap" Spacing="3">
                                                <!-- Download Link -->
                                                <MudItem>
                                                    <MudLink Href="@($"data:text/plain;base64,{Convert.ToBase64String(aufgabe.Input_TXT)}")" download="@($"level{CurrentLevel.Levelnr}_{aufgabe.Aufgabennr}.in")">
                                                        <MudIcon Icon="@Icons.Material.Filled.Download" /> level@(CurrentLevel.Levelnr)_@aufgabe.Aufgabennr
                                                    </MudLink>
                                                </MudItem>

                                                <!-- Datei hochladen -->
                                                <MudItem>
                                                    <MudFileUpload T="IBrowserFile" FilesChanged="@(e => UploadFile(e, aufgabe.AufgabenID))" Accept=".txt">
                                                        <ActivatorContent>
                                                            <MudGrid Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                                                                <MudItem>
                                                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                                                        Datei hochladen
                                                                    </MudButton>
                                                                </MudItem>

                                                                @if (UploadedFiles.ContainsKey(aufgabe.AufgabenID))
                                                                {
                                                                    var uploadedFile = UploadedFiles[aufgabe.AufgabenID];

                                                                    <MudItem>
                                                                        <MudText>
                                                                            <MudIcon Icon="@Icons.Material.Filled.AttachFile" /> @uploadedFile.FileName
                                                                            @if (uploadedFile.FileIsRight.HasValue)
                                                                            {
                                                                                @if (uploadedFile.FileIsRight.Value)
                                                                                {
                                                                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                                                                }
                                                                                else
                                                                                {
                                                                                    <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" />
                                                                                    <span>@($"+ {Event.StrafminutenProFehlversuch} min Strafminuten")</span>
                                                                                }
                                                                            }
                                                                        </MudText>
                                                                    </MudItem>
                                                                }
                                                            </MudGrid>
                                                        </ActivatorContent>
                                                    </MudFileUpload>
                                                </MudItem>

                                                <!-- Datei Absenden Button am Ende der Reihe -->
                                                <MudItem>
                                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await SubmitFile(aufgabe))">
                                                        ✅ Datei Absenden
                                                    </MudButton>
                                                </MudItem>
                                            </MudGrid>

                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>

                        @if (AllFilesSubmitted)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="ProceedToNextLevel" Class="submit-button">
                                🎯 Weiter zum nächsten Level
                            </MudButton>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Team Info Box (Rechts) -->
            <MudItem xs="12" md="2">
                <MudCard Elevation="3">
                    <MudCardContent>
                        @if (Group.Teilnehmertyp == "Team")
                        {
                            <MudText Typo="Typo.h6">👥 Gruppe</MudText>
                            <MudText Typo="Typo.body1" Class="font-bold">Gruppenname: @(Group.Gruppenname ?? User.Identity.Name)</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.h6">🎮 Einzelspieler: @Group.GruppenleiterId</MudText>
                        }


                        @if (Group.Teilnehmertyp == "Team")
                        {
                            <MudDivider />
                            <MudList Dense="true" T="string">
                                @foreach (var member in Group.UserInGruppe)
                                {
                                    <MudListItem Class="d-flex align-center">
                                        <MudText Typo="Typo.body2" Class="ml-2">
                                            @(member.User_UserId == Group.GruppenleiterId ? "👑 Gruppenleiter: " : "") @member.User_UserId
                                        </MudText>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>



    }
}

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
    }

    .title {
        font-weight: bold;
        color: #2c3e50;
        margin-bottom: 16px;
    }

    .subtitle {
        font-weight: bold;
        color: #34495e;
        margin-bottom: 8px;
    }

    .level-title, .input-title {
        font-weight: bold;
        color: #2980b9;
        margin-bottom: 4px;
    }

    .level-status, .input-status {
        color: #7f8c8d;
        margin-bottom: 4px;
    }

    .download-link {
        color: #e74c3c;
        text-decoration: none;
        margin-bottom: 8px;
    }

        .download-link:hover {
            text-decoration: underline;
        }

    .description {
        color: #95a5a6;
        margin-bottom: 16px;
    }

    .timer {
        font-weight: bold;
        margin-top: 16px;
        font-size: 1.5em;
    }

    .submit-button {
        margin-top: 20px;
    }
    /* Tabellenstil */
    table {
        width: 100%;
        border-collapse: collapse;
        font-family: Arial, sans-serif;
        margin: 20px 0;
    }

    /* Tabellenüberschrift */
    th {
        text-align: left;
        padding: 10px;
        background-color: #f4f4f4;
        font-weight: bold;
    }

    /* Tabellenzellen */
    td {
        padding: 8px;
        border: 1px solid #ddd;
        vertical-align: top;
    }

    /* Level-Detailstile */
    .level-detail {
        font-size: 14px;
        margin: 5px 0;
        color: #2ecc71; /* Grün für Zeit */
    }

    /* Fehler- oder nicht abgeschlossene Level */
    .level-not-completed {
        font-size: 14px;
        color: #e74c3c; /* Rot für "Nicht geschafft" */
        font-weight: bold;
    }

</style>

<script>
    window.startTimer = () => {
        const timerElement = document.getElementById("timer");
        let [hours, minutes, seconds] = timerElement.innerText.split(":").map(Number);

        const updateTimer = () => {
            seconds++;
            if (seconds === 60) {
                seconds = 0;
                minutes++;
            }
            if (minutes === 60) {
                minutes = 0;
                hours++;
            }

            timerElement.innerText = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        };

        setInterval(updateTimer, 1000);
    };

    document.addEventListener("DOMContentLoaded", () => {
        startTimer();
    });
</script>