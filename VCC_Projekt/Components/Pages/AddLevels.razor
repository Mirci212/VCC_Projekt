@page "/add-levels"
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        
        
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Event auswählen</MudText>
                    <MudSelect T="Event" Label="Event wählen" ValueChanged="@(async e => await OnEventSelected(e))" ToStringFunc="@(e => e != null ? $"{e.Bezeichnung} (EventId:{e.EventID})" : "")">
                        @foreach (var ev in _events)
                        {
                            <MudSelectItem Value="@ev">@ev.Bezeichnung (@ev.Beginn)</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Levels List -->
        @foreach (var level in _levels)
        {
            <!-- Index innerhalb der Schleife speichern -->
            <MudItem xs="12" sm="6">
                <MudCard Class="level-card">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">@($"Level {level.Levelnr}")</MudText>
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Filled.ExpandMore" OnClick="() => ToggleLevel(level.Levelnr)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveLevel(level.Levelnr)" Disabled="@IsEventInPast" />
                    </MudCardHeader>
                    <MudCollapse Expanded="@level.IsExpanded">
                        <MudCardContent>
                            <MudFileUpload T="IBrowserFile" FilesChanged="@(e => UploadFile(e, level.Levelnr))" Accept=".pdf" Disabled="@IsEventInPast">
                                <ActivatorContent>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" Disabled="@IsEventInPast">
                                        PDF hochladen
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>

                            @if (level.IsExpanded)
                            {
                                @if (level.NewAngabe_PDF != null)
                                {
                                    <div class="file-preview">
                                        <a href="data:application/pdf;base64,@Convert.ToBase64String(level.NewAngabe_PDF)" download="@($"{_selectedEvent.Bezeichnung}_Level{level.Levelnr + 1}.pdf")" class="download-link">PDF herunterladen</a>
                                        <iframe src="data:application/pdf;base64,@Convert.ToBase64String(level.NewAngabe_PDF)" class="pdf-preview"></iframe>
                                    </div>
                                }
                                else
                                {
                                    <div class="file-preview">
                                        <a href="/api/files/@level.LevelId" download="@($"{_selectedEvent.Bezeichnung}_Level{level.Levelnr + 1}.pdf")" class="download-link">PDF herunterladen</a>
                                        <iframe src="/api/files/@level.LevelId" class="pdf-preview"></iframe>
                                    </div>
                                }
                            }


                            <ul class="list-group mt-3">
                                @if (level.Aufgaben.Count != 0)
                                {
                                    @foreach (var aufgabe in level.Aufgaben)
                                    {
                                        <li class="list-group-item">
                                            <MudCard Class="task-card">
                                                <MudCardHeader>
                                                    <MudText Typo="Typo.body1">Aufgabe @aufgabe.Aufgabennr</MudText>
                                                    <MudSpacer />
                                                    <MudIconButton Icon="@Icons.Material.Filled.ExpandMore" OnClick="() => ToggleTask(level.Levelnr, aufgabe.Aufgabennr)" />
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveTask(level.Levelnr, aufgabe.Aufgabennr)" Disabled="@IsEventInPast" />
                                                </MudCardHeader>
                                                <MudCollapse Expanded="@aufgabe.IsExpanded">
                                                    <MudCardContent>
                                                        <MudFileUpload T="IBrowserFile" FilesChanged="@(e => UploadTaskFile(e, level.Levelnr, aufgabe.Aufgabennr, "input"))" Accept=".txt" Disabled="@IsEventInPast">
                                                            <ActivatorContent>
                                                                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" Disabled="@IsEventInPast">
                                                                    Input.txt hochladen
                                                                </MudButton>
                                                            </ActivatorContent>
                                                        </MudFileUpload>
                                                        @if (aufgabe.IsExpanded)
                                                        {
                                                            @if (aufgabe.NewInput_TXT != null)
                                                            {
                                                                <div class="file-preview">
                                                                    <a href="data:text/plain;base64,@Convert.ToBase64String(aufgabe.NewInput_TXT)" download="@($"{_selectedEvent.Bezeichnung}_Level{level.Levelnr}_Input{aufgabe.Aufgabennr}.txt")" class="download-link">Input.txt herunterladen</a>
                                                                    <pre class="txt-preview">@System.Text.Encoding.UTF8.GetString(aufgabe.NewInput_TXT)</pre>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <div class="file-preview">
                                                                    <a href="/api/files/@level.LevelId/@aufgabe.AufgabenId/input" download="@($"{_selectedEvent.Bezeichnung}_Level{level.Levelnr}_Input{aufgabe.Aufgabennr}.txt")" class="download-link">Input.txt herunterladen</a>
                                                                    <iframe src="/api/files/@level.LevelId/@aufgabe.AufgabenId/input" width="100%" height="500px"></iframe>
                                                                </div>
                                                            }
                                                        }

                                                        <br />
                                                        <MudFileUpload T="IBrowserFile" FilesChanged="@(e => UploadTaskFile(e, level.Levelnr, aufgabe.Aufgabennr, "output"))" Accept=".txt" Disabled="@IsEventInPast">
                                                            <ActivatorContent>
                                                                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" Disabled="@IsEventInPast">
                                                                    Result.txt hochladen
                                                                </MudButton>
                                                            </ActivatorContent>
                                                        </MudFileUpload>
                                                        @if (aufgabe.IsExpanded)
                                                        {
                                                            @if (aufgabe.NewErgebnis_TXT != null)
                                                            {
                                                                <div class="file-preview">
                                                                    <a href="data:text/plain;base64,@Convert.ToBase64String(aufgabe.NewErgebnis_TXT)" download="@($"{_selectedEvent.Bezeichnung}_Level{level.Levelnr}_Input{aufgabe.Aufgabennr}.txt")" class="download-link">Input.txt herunterladen</a>
                                                                    <pre class="txt-preview">@System.Text.Encoding.UTF8.GetString(aufgabe.NewErgebnis_TXT)</pre>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <div class="file-preview">
                                                                    <a href="/api/files/@level.LevelId/@aufgabe.AufgabenId/result" download="@($"{_selectedEvent.Bezeichnung}_Level{level.Levelnr}_Result{aufgabe.Aufgabennr}.txt")" class="download-link">Input.txt herunterladen</a>
                                                                    <iframe class="txt-preview" src="/api/files/@level.LevelId/@aufgabe.AufgabenId/result"></iframe>
                                                                </div>
                                                            }
                                                        }
                                                        <MudButton OnClick="() => RemoveTask(level.Levelnr, aufgabe.Aufgabennr)" Color="Color.Error" Class="mt-2" Disabled="@IsEventInPast">Aufgabe entfernen</MudButton>
                                                    </MudCardContent>
                                                </MudCollapse>
                                            </MudCard>
                                        </li>
                                    }
                                }
                            </ul>

                            <MudButton OnClick="() => AddTask(level.Levelnr)" Color="Color.Success" Class="mt-2" Disabled="@IsEventInPast">Neue Aufgabe hinzufügen</MudButton>
                        </MudCardContent>
                    </MudCollapse>
                </MudCard>
            </MudItem>
        }
        <!-- Add Level Button -->
        <MudItem xs="12">
            <MudCard class="mt-3">
                <MudCardContent>
                    <MudButton OnClick="() => AddLevel()" Color="Color.Primary" Disabled="@(_levels.Count >= 5 || _selectedEvent.EventID == 0 || IsEventInPast)">Neues Level hinzufügen</MudButton>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudCard class="mt-3">
        <MudCardContent>
            <MudButton OnClick="() => SaveLevels()" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" Disabled="@(_selectedEvent.EventID == 0 || IsEventInPast)" >Levels speichern</MudButton>
        </MudCardContent>
    </MudCard>
</MudContainer>

<style>
    .container {
        max-width: 100%;
        margin: auto;
        padding: 20px;
    }

    .level-card, .task-card {
        margin-bottom: 20px;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .level-card:hover, .task-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

    .file-preview {
        margin-top: 10px;
        padding: 10px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .download-link {
        display: block;
        margin-bottom: 10px;
        color: #007bff;
        text-decoration: none;
        transition: color 0.2s;
    }

        .download-link:hover {
            color: #0056b3;
        }

    .pdf-preview {
        width: 100%;
        height: 500px;
        border: none;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .txt-preview {
        white-space: pre-wrap;
        background-color: #f5f5f5;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .card-header {
        background-color: #f5f5f5;
        padding: 10px 15px;
        border-bottom: 1px solid #e0e0e0;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }

    .card-body {
        padding: 15px;
    }

    .form-select, .form-control-file {
        width: 100%;
        margin-bottom: 10px;
    }

    .btn {
        margin-right: 10px;
    }

    .list-group-item {
        border: none;
        padding: 0;
    }

        .list-group-item .card {
            margin-bottom: 10px;
        }

    .task-card {
        border: 2px solid #007bff;
        border-radius: 8px;
        padding: 10px;
        background-color: #f0f8ff;
    }

        .task-card .file-preview {
            margin-top: 15px;
        }

        .task-card .download-link {
            margin-bottom: 5px;
        }

        .task-card .txt-preview {
            margin-bottom: 15px;
        }
</style>