@page "/add-levels"
@using Microsoft.AspNetCore.Components.Forms

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Event auswählen</MudText>
                    <MudSelect T="int" Label="Event wählen" ValueChanged="@(async e => await OnEventSelected(e))">
                        <MudSelectItem Value="0">Bitte wählen...</MudSelectItem>
                        @foreach (var ev in _events)
                        {
                            <MudSelectItem Value="@ev.EventID">@ev.Bezeichnung</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Levels List -->
        @for (int i = 0; i < _levels.Count; i++)
        {
            var index = i;
            <!-- Index innerhalb der Schleife speichern -->
            <MudItem xs="12" sm="6">
                <MudCard Class="level-card">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">@($"Level {index + 1}")</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.ExpandMore" OnClick="() => ToggleLevel(index)" />
                    </MudCardHeader>
                    <MudCollapse Expanded="@_levels[index].IsExpanded">
                        <MudCardContent>
                            <MudFileUpload T="IBrowserFile" FilesChanged="@(e => UploadFile(e, index))" Accept=".pdf">
                                <ActivatorContent>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                        PDF hochladen
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>
                            @if (_levels[index].Angabe_PDF != null)
                            {
                                <div class="file-preview">
                                    <a href="data:application/pdf;base64,@Convert.ToBase64String(_levels[index].Angabe_PDF)" download="@($"Level_{index}.pdf")" class="download-link">PDF herunterladen</a>
                                    <iframe src="data:application/pdf;base64,@Convert.ToBase64String(_levels[index].Angabe_PDF)" class="pdf-preview"></iframe>
                                </div>
                            }
                            <MudButton OnClick="() => AddTask(index)" Color="Color.Secondary" Class="mt-2">Neue Aufgabe hinzufügen</MudButton>

                            <ul class="list-group mt-3">
                                @for (int j = 0; j < _levels[index].Aufgaben.Count; j++)
                                {
                                    var taskIndex = j;
                                    <!-- Index innerhalb der Schleife speichern -->
                                    <li class="list-group-item">
                                        <MudCard Class="task-card">
                                            <MudCardContent>
                                                <MudText Typo="Typo.body1">Aufgabe @(taskIndex + 1)</MudText>
                                                <MudFileUpload T="IBrowserFile" FilesChanged="@(e => UploadTaskFile(e, index, taskIndex, "input"))">
                                                    <ActivatorContent>
                                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" Accept=".txt">
                                                            Input.txt hochladen
                                                        </MudButton>
                                                    </ActivatorContent>
                                                </MudFileUpload>
                                                @if (_levels[index].Aufgaben[taskIndex].Input_TXT != null)
                                                {
                                                    <div class="file-preview">
                                                        <a href="data:text/plain;base64,@Convert.ToBase64String(_levels[index].Aufgaben[taskIndex].Input_TXT)" download="@($"Input_{index}_{taskIndex}.txt")" class="download-link">Input.txt herunterladen</a>
                                                        <pre class="txt-preview">@System.Text.Encoding.UTF8.GetString(_levels[index].Aufgaben[taskIndex].Input_TXT)</pre>
                                                    </div>
                                                }
                                                <MudFileUpload T="IBrowserFile" FilesChanged="@(e => UploadTaskFile(e, index, taskIndex, "output"))" Accept=".txt">
                                                    <ActivatorContent>
                                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                                            Output.txt hochladen
                                                        </MudButton>
                                                    </ActivatorContent>
                                                </MudFileUpload>
                                                @if (_levels[index].Aufgaben[taskIndex].Ergebnis_TXT != null)
                                                {
                                                    <div class="file-preview">
                                                        <a href="data:text/plain;base64,@Convert.ToBase64String(_levels[index].Aufgaben[taskIndex].Ergebnis_TXT)" download="@($"Output_{index}_{taskIndex}.txt")" class="download-link">Ergebnis.txt herunterladen</a>
                                                        <pre class="txt-preview">@System.Text.Encoding.UTF8.GetString(_levels[index].Aufgaben[taskIndex].Ergebnis_TXT)</pre>
                                                    </div>
                                                }
                                                <MudButton OnClick="() => RemoveTask(index, taskIndex)" Color="Color.Error" Class="mt-2">Aufgabe entfernen</MudButton>
                                            </MudCardContent>
                                        </MudCard>
                                    </li>
                                }
                            </ul>

                            <MudButton OnClick="() => RemoveLevel(index)" Color="Color.Error" Class="mt-3">Level entfernen</MudButton>
                        </MudCardContent>
                    </MudCollapse>
                </MudCard>
            </MudItem>
        }

        <!-- Add Level Button -->
        <MudItem xs="12">
            <MudCard class="mt-3">
                <MudCardContent>
                    <MudButton OnClick="AddLevel" Disabled="@(_levels.Count >= 5 || _selectedEventId == 0)" Color="Color.Primary">Neues Level hinzufügen</MudButton>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudCard class="mt-3">
        <MudCardContent>
            <MudButton OnClick="SaveLevels" Color="Color.Primary" Disabled="@(_selectedEventId == 0)">Levels speichern</MudButton>
        </MudCardContent>
    </MudCard>
</MudContainer>

<style>
    .container {
        max-width: 100%;
        margin: auto;
        padding: 20px;
    }

    .level-card, .task-card {
        margin-bottom: 20px;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .level-card:hover, .task-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

    .file-preview {
        margin-top: 10px;
        padding: 10px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .download-link {
        display: block;
        margin-bottom: 10px;
        color: #007bff;
        text-decoration: none;
        transition: color 0.2s;
    }

        .download-link:hover {
            color: #0056b3;
        }

    .pdf-preview {
        width: 100%;
        height: 300px;
        border: none;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .txt-preview {
        white-space: pre-wrap;
        background-color: #f5f5f5;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .card-header {
        background-color: #f5f5f5;
        padding: 10px 15px;
        border-bottom: 1px solid #e0e0e0;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }

    .card-body {
        padding: 15px;
    }

    .form-select, .form-control-file {
        width: 100%;
        margin-bottom: 10px;
    }

    .btn {
        margin-right: 10px;
    }

    .list-group-item {
        border: none;
        padding: 0;
    }

        .list-group-item .card {
            margin-bottom: 10px;
        }
</style>