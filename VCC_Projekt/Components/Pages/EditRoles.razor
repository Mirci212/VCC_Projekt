@page "/change-roles"
@using System.Collections.Generic
@inject IDialogService DialogService
@inject EmailSender emailSender
@using MudExRichTextEditor
@using MudExRichTextEditor.Types


<PageTitle>Rollen ändern</PageTitle>

<div class="container mt-5">
    <div class="text-center">
        <h1 class="display-4 font-weight-bold" style="color: #134883;">Rollen ändern</h1>
        <p class="lead text-muted">
            Um die Rollen einer Person oder Gruppe zu verändern, bitte die Person oder Gruppe suchen und dann die Rollen bearbeiten.
        </p>
    </div>

    <!-- DataGrid -->
    <div class="datagrid">
        <MudDataGrid T="EditRoleUser" Items="@users" ColumnResizeMode="ResizeMode.Column"
                     SortMode="SortMode.Multiple" Filterable="true" ReadOnly="false"
                     QuickFilter="@_quickFilter" EditMode="DataGridEditMode.Form"
                     CommittedItemChanges="@CommittedItemChanges" EditTrigger="DataGridEditTrigger.Manual">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Personen und Gruppen</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>

            <Columns>
                @if (!string.IsNullOrEmpty(_searchString))
                {
                    <HierarchyColumn T="EditRoleUser" ButtonDisabledFunc="@(x => x.Typ != "Team")" />
                    <TemplateColumn Title="Email" Editable="false" Required="false">
                        <CellTemplate>
                            <div class="email-cell">
                                <span>@context.Item.Email</span>
                                @if (!string.IsNullOrEmpty(context.Item.Email))
                                {
                                    <MudTooltip Text="Email senden" Placement="Placement.Bottom">
                                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Email" Color="Color.Primary" OnClick="@(() => OpenEmailDialog(context.Item.Email))" />
                                    </MudTooltip>
                                }
                            </div>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="u => u.DiplayName" Title="Benutzername/Gruppenname" Editable="false" />
                    <PropertyColumn Property="u => u.Fullname" Title="Name" Editable="false" Required="false" />
                    <PropertyColumn Property="u => u.Typ" Title="Typ" Editable="false" />
                    <PropertyColumn Property=@(u => string.Join(", ", u.Roles)) Title="Rollen">
                        <EditTemplate Context="context">
                            <MudSelect T="string" SelectedValues="context.Item.Roles" SelectedValuesChanged="@((newRoles) => OnRolesChanged(context.Item, newRoles))" MultiSelection="@(context.Item.Typ == "Nutzer" ? true : false)" Required Margin="Margin.Normal">
                                @if (context.Item.Typ != "Nutzer")
                                {
                                    <MudSelectItem T="string" Value="@("Gesperrt")">Gesperrt</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Nicht gesperrt")">Nicht gesperrt</MudSelectItem>
                                }
                                else
                                {
                                    @foreach (var role in roles)
                                    {
                                        <MudSelectItem T="string" Value="@role" Disabled="@(context.Item.Roles.Contains("Gesperrt") && role != "Gesperrt")">@role</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </EditTemplate>
                    </PropertyColumn>
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate Context="context">
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                        </CellTemplate>
                    </TemplateColumn>
                }
            </Columns>

            <ChildRowContent>
                <MudDataGrid T="EditRoleUser" Items="@context.Item.Teammitglieder" ColumnResizeMode="ResizeMode.Column"
                             SortMode="SortMode.Multiple" Filterable="true" ReadOnly="false" EditMode="DataGridEditMode.Form"
                             CommittedItemChanges="@CommittedItemChanges" EditTrigger="DataGridEditTrigger.Manual">
                    <Columns>
                        <PropertyColumn Property="u => u.Email" Title="Email" Editable="false" Required="false" />
                        <PropertyColumn Property="u => u.DiplayName" Title="Benutzername" Editable="false"/>
                        <PropertyColumn Property="u => u.Fullname" Title="Name" Editable="false" Required="false" />
                        <PropertyColumn Property=@(u => string.Join(", ", u.Roles)) Title="Rollen" Context="child_context">
                            <EditTemplate Context="child_context">
                                <MudSelect T="string" SelectedValues="child_context.Item.Roles" SelectedValuesChanged="@((newRoles) => OnRolesChanged(child_context.Item, newRoles))" MultiSelection="@(child_context.Item.Typ == "Nutzer" ? true : false)" Required Margin="Margin.Normal">
                                    @foreach (var role in roles)
                                    {
                                        <MudSelectItem T="string" Value="@role" Disabled="@(child_context.Item.Roles.Contains("Gesperrt") && role != "Gesperrt")">@role</MudSelectItem>
                                    }
                                </MudSelect>
                            </EditTemplate>
                        </PropertyColumn>
                        <TemplateColumn CellClass="d-flex justify-end" Context="child_context">
                            <CellTemplate Context="child_context">
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@child_context.Actions.StartEditingItemAsync" />
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </ChildRowContent>

            <PagerContent>
                @if (!string.IsNullOrEmpty(_searchString))
                {
                    <MudDataGridPager T="EditRoleUser" />
                }
            </PagerContent>
        </MudDataGrid>
    </div>
</div>




<MudDialog @bind-Visible="isEmailDialogVisible">
    <DialogContent>
        <MudText Typo="Typo.h6">E-Mail senden</MudText>
        <MudSelect T="string" SelectAll="true" SelectedValues="selectedEmails" SelectAllText="@("Alle auswählen")" Label="An" MultiSelection="true" Required="true">
            @foreach (var email in users.Where(user => !string.IsNullOrEmpty(user.Email)))
            {
                <MudSelectItem Value="@email.Email">@email.Email</MudSelectItem>
            }
        </MudSelect>
        <MudTextField @bind-Value="emailSubject" Label="Betreff" Required="true" />
        <MudExRichTextEdit @ref="Editor" Height="444" Class="m-2" Placeholder="Nachricht bearbeiten" EnableResize="true" Tools="@(QuillTool.All().Where(q => q.Class != "" && q.Class != "ql-video").ToArray())" />
        <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                    Anhänge hinzufügen
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>
        @if (attachments != null && attachments.Any())
        {
            <MudList T="IBrowserFile">
                @foreach (var file in attachments)
                {
                    <MudListItem Icon="@Icons.Material.Filled.AttachFile" OnClick="@(() => RemoveAttachment(file))">
                        @file.Name <code>@file.Size bytes</code>
                    </MudListItem>
                }
            </MudList>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="StartSendingEmails" Disabled="@string.IsNullOrEmpty(emailSubject)">Senden</MudButton>
        <MudButton Color="Color.Secondary" OnClick="Cancel">Abbrechen</MudButton>
    </DialogActions>
</MudDialog>

<style>
    body {
        background-color: #f8f9fa;
    }

    h1, h2, h3 {
        color: #134883;
    }

    .email-cell {
        display: flex;
        align-items: center; /* Vertikal zentrieren */
        justify-content: space-between; /* Button am Ende der Zelle */
        width: 100%; /* Volle Breite der Zelle nutzen */
    }

    .btn-success {
        background-color: #134883;
        border-color: #134883;
    }

        .btn-success:hover {
            background-color: #2f5e91;
            border-color: #2f5e91;
        }

    .form-control {
        border: 2px solid #134883;
    }

        .form-control:focus {
            border-color: #2f5e91;
            box-shadow: 0 0 5px rgba(47, 94, 145, 0.5);
        }

    .alerts {
        margin-bottom: 20px;
        margin-top: 20px;
    }

    .datagrid {
        margin-top: 20px;
    }
</style>